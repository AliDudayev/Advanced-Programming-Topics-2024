recordPage:

        <td>
            <a th:href="@{/records/update(userCode=${record.userCode})}">
                <button>Edit</button>
            </a>
            <form th:action="@{/records/delete(userCode=${record.userCode})}" method="post" style="display: inline;">
                <button type="submit">Delete</button>
            </form>
        </td>
		
		
		
		<!-- Add Record Form -->
<h2>Add New Record</h2>
<form th:action="@{/records/add}" method="post">
    <label for="userCode">User Code:</label>
    <input type="text" id="userCode" name="userCode" required><br>
    <label for="fastestTime">Fastest Time:</label>
    <input type="text" id="fastestTime" name="fastestTime"><br>
    <label for="longestDistance">Longest Distance:</label>
    <input type="text" id="longestDistance" name="longestDistance"><br>
    <label for="maxWeightLifted">Max Weight Lifted:</label>
    <input type="text" id="maxWeightLifted" name="maxWeightLifted"><br>
    <label for="longestWorkoutDuration">Longest Workout Duration:</label>
    <input type="text" id="longestWorkoutDuration" name="longestWorkoutDuration"><br>
    <label for="mostCaloriesBurned">Most Calories Burned:</label>
    <input type="text" id="mostCaloriesBurned" name="mostCaloriesBurned"><br>
    <button type="submit">Add Record</button>
</form>



recordService:

    // Get a specific record by recordCode
    public Object getRecord(String userCode) {
        String url = apiGatewayUrl + BASE_PATH + "?userCode=" + userCode;
        ResponseEntity<Object> response = restTemplate.exchange(
                url, HttpMethod.GET, null, Object.class
        );
        return response.getBody();
    }

    // Create a new record
    public Object createRecord(Object recordRequest) {
        String url = apiGatewayUrl + BASE_PATH;
        HttpEntity<Object> requestEntity = new HttpEntity<>(recordRequest);
        ResponseEntity<Object> response = restTemplate.exchange(
                url, HttpMethod.POST, requestEntity, Object.class
        );
        return response.getBody();
    }

    // Update a record
    public void updateRecord(Object recordRequest) {
        String userCode = ((RecordRequest) recordRequest).getUserCode();
        String url = apiGatewayUrl + BASE_PATH + "?userCode=" + userCode;
        HttpEntity<Object> requestEntity = new HttpEntity<>(recordRequest);
        restTemplate.exchange(url, HttpMethod.PUT, requestEntity, Void.class);
    }

    // Delete a record by recordCode
    public void deleteRecord(String userCode) {
        String url = apiGatewayUrl + BASE_PATH + "?userCode=" + userCode;

        HttpHeaders headers = new HttpHeaders();
        headers.setBearerAuth(tokenService.getToken());
        HttpEntity<Void> requestEntity = new HttpEntity<>(headers);

        restTemplate.exchange(url, HttpMethod.DELETE, requestEntity, Void.class);
    }
	
	


editRecord:


<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Edit Record</title>
</head>
<body>
<h1>Edit Record</h1>
<form th:action="@{/records/update}" method="post">
    <div>
        <label for="userCode">User Code:</label>
        <input type="text" id="userCode" name="userCode" th:value="${record.userCode}" required disabled />
    </div>
    <div>
        <label for="fastestTime">Fastest Time:</label>
        <input type="text" id="fastestTime" name="fastestTime" th:value="${record.fastestTime}" required />
    </div>
    <div>
        <label for="longestDistance">Longest Distance:</label>
        <input type="text" id="longestDistance" name="longestDistance" th:value="${record.longestDistance}" required />
    </div>
    <div>
        <label for="maxWeightLifted">Max Weight Lifted:</label>
        <input type="text" id="maxWeightLifted" name="maxWeightLifted" th:value="${record.maxWeightLifted}" required />
    </div>
    <div>
        <label for="longestWorkoutDuration">Longest Workout Duration:</label>
        <input type="text" id="longestWorkoutDuration" name="longestWorkoutDuration" th:value="${record.longestWorkoutDuration}" required />
    </div>
    <div>
        <label for="mostCaloriesBurned">Most Calories Burned:</label>
        <input type="text" id="mostCaloriesBurned" name="mostCaloriesBurned" th:value="${record.mostCaloriesBurned}" required />
    </div>
    <button type="submit">Update Record</button>
</form>
<a href="/records"><button>Cancel</button></a>
</body>
</html>





recordController:


    // Get records by user
    @GetMapping("/user")
    public String getRecordsByUser(@RequestParam("userCode") String userCode, Model model) {
        model.addAttribute("records", recordService.getRecord(userCode));
        return "recordPage";
    }

    // Add a new record
    @PostMapping("/add")
    public String addRecord(@RequestBody RecordRequest recordRequest, Model model) {
        recordService.createRecord(recordRequest);
        model.addAttribute("message", "Record created successfully!");
        return "redirect:/records";
    }

    // Update an existing record
    @PostMapping("/update")
    public String updateRecord(@RequestBody RecordRequest recordRequest, Model model) {
        recordService.updateRecord(recordRequest);
        model.addAttribute("message", "Record updated successfully!");
        return "redirect:/records";
    }

    // Delete a record
    @PostMapping("/delete/{userCode}")
    public String deleteRecord(@PathVariable String userCode, Model model) {
        String token = tokenService.getToken();
        if (token == null) {
            return "redirect:/error";
        }
        else {
            recordService.deleteRecord(userCode);
            model.addAttribute("message", "Record deleted successfully!");
            return "redirect:/records";
        }
    }